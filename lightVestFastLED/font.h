const bool SPECIAL_CHARS[][13][9] {
    { // edge
        {0,0,0,0,0,0,0,0,0},
        {0,1,1,1,1,0,0,0,0},
        {0,1,1,1,0,1,1,1,1},
        {1,1,1,1,0,1,1,1,1},
        {0,0,0,0,1,1,1,1,0},
        {0,1,1,1,1,1,1,1,0},
        {0,1,1,1,1,1,1,0,0},
        {1,1,1,1,1,1,1,0,0},
        {1,1,1,1,1,1,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
    },

    { // edge
        000000000
        000000000
        000000000
        000000000
        000000000
        000000000
        000000000
        000000000
        000000000
        000000000
        000000000
        000000000
    },

    { // <3 0
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,1,0,0},
        {0,0,1,1,0,1,1,0,0},
        {0,0,0,1,1,1,0,0,0},
        {0,0,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
    },
    { // <3 1
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,1,1,0,1,1,0,0},
        {0,1,1,1,1,1,1,1,0},
        {0,1,1,1,1,1,1,1,0},
        {0,0,1,1,1,1,1,0,0},
        {0,0,0,1,1,1,0,0,0},
        {0,0,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
    },
    { // <3 2
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,1,1,0,0,0,1,1,0},
        {1,1,1,1,0,1,1,1,1},
        {1,1,1,1,1,1,1,1,1},
        {1,1,1,1,1,1,1,1,1},
        {0,1,1,1,1,1,1,1,0},
        {0,0,1,1,1,1,1,0,0},
        {0,0,0,1,1,1,0,0,0},
        {0,0,0,0,1,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
    },
    { // :) 0
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,1,0},
        {0,0,1,0,0,0,1,0,0},
        {0,0,0,1,1,1,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
    },
    { // :) 1
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,0,0,0},
        {0,0,1,0,0,0,1,1,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,1,0,0,0,0,0,1,0},
        {0,0,1,1,1,1,1,0,0},
        {0,0,0,1,1,1,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
    },
    { // :) 2
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,1,0,0},
        {0,1,1,1,0,0,1,0,0},
        {0,0,0,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {1,1,0,0,0,0,0,1,1},
        {0,1,1,1,1,1,1,1,0},
        {0,0,1,1,1,1,1,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
    },
    { // :) 3
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,1,0,0},
        {0,1,1,1,0,1,1,1,0},
        {0,0,1,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,0,0,1},
        {1,1,1,1,0,1,1,1,1},
        {0,1,1,1,1,1,1,1,0},
        {0,0,1,1,1,1,1,0,0},
        {0,0,0,1,1,1,0,0,0},
        {0,0,0,0,0,0,0,0,0},
    },
    { // :) 4
        {0,0,0,0,0,0,0,0,0},
        {0,0,1,0,0,0,1,0,0},
        {0,1,1,1,0,1,1,1,0},
        {0,1,1,1,0,1,1,1,0},
        {0,1,1,1,0,1,1,1,0},
        {0,0,1,0,0,0,1,0,0},
        {0,0,0,0,0,0,0,0,0},
        {1,1,1,1,1,1,1,1,1},
        {1,1,1,1,1,1,1,1,1},
        {1,1,1,1,1,1,1,1,1},
        {0,1,1,1,1,1,1,1,0},
        {0,0,1,1,1,1,1,0,0},
        {0,0,0,1,1,1,0,0,0},
    },
    { // :) 5
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,1,1,1,0,1,1,1,0},
        {1,1,1,1,1,1,1,1,1},
        {0,1,1,1,0,1,1,1,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {1,1,1,1,1,1,1,1,1},
        {1,1,1,1,1,1,1,1,1},
        {1,1,1,1,1,1,1,1,1},
        {0,1,1,1,1,1,1,1,0},
        {0,0,1,1,1,1,1,0,0},
        {0,0,0,1,1,1,0,0,0},
    },
};

const bool HALF_CASE[][5][5]
{
    { // Space
        {0,0,0,0,0},
        {0,0,0,0,0},
        {0,0,0,0,0},
        {0,0,0,0,0},
        {0,0,0,0,0},
    },
    { // A
        {0,0,1,0,0},
        {0,1,0,1,0},
        {1,0,0,0,1},
        {1,1,1,1,1},
        {1,0,0,0,1},
    },
	{ //b
        {1,1,1,1,0},
        {1,0,0,0,1},
        {1,1,1,1,0},
        {1,0,0,0,1},
        {1,1,1,1,0},
	},
	{ //c
        {0,1,1,1,1},
        {1,0,0,0,0},
        {1,0,0,0,0},
        {1,0,0,0,0},
        {0,1,1,1,1},
	},
	{ //d
        {1,1,1,1,0},
        {1,0,0,0,1},
        {1,0,0,0,1},
        {1,0,0,0,1},
        {1,1,1,1,0},
	}, 
    { // E
        {1,1,1,1,1},
        {1,0,0,0,0},
        {1,1,1,1,0},
        {1,0,0,0,0},
        {1,1,1,1,1},
    },
	{ //f
        {1,1,1,1,1},
        {1,0,0,0,0},
        {1,1,1,1,0},
        {1,0,0,0,0},
        {1,0,0,0,0},	
	}, 
	{ //g
        {0,1,1,1,0},
        {1,0,0,0,0},
        {1,0,0,1,1},
        {1,0,0,0,1},
        {0,1,1,1,0},
	}, 
	{ //h
        {1,0,0,0,1},
        {1,0,0,0,1},
        {1,1,1,1,1},
        {1,0,0,0,1},
        {1,0,0,0,1},	
	},
	{  //i
        {0,1,1,1,0},
        {0,0,1,0,0},
        {0,0,1,0,0},
        {0,0,1,0,0},
        {0,1,1,1,0},
	},
	{
        {0,0,0,1,0},
        {0,0,0,1,0},
        {0,0,0,1,0},
        {1,0,0,1,0},
        {0,1,1,0,0},
	}, //j
	{
        {0,1,0,0,1},
        {0,1,0,1,0},
        {0,1,1,0,0},
        {0,1,0,1,0},
        {0,1,0,0,1},
	}, //k
    { // L
        {1,0,0,0,0},
        {1,0,0,0,0},
        {1,0,0,0,0},
        {1,0,0,0,0},
        {1,1,1,1,1},
    },
	{}, //m
    { // N
        {1,0,0,0,1},
        {1,1,0,0,1},
        {1,0,1,0,1},
        {1,0,0,1,1},
        {1,0,0,0,1},
    },
    { // O
        {0,1,1,1,0},
        {1,0,0,0,1},
        {1,0,0,0,1},
        {1,0,0,0,1},
        {0,1,1,1,0},
    },
	{ //p
        {1,1,1,1,0},
        {1,0,0,0,1},
        {1,1,1,1,0},
        {1,0,0,0,0},
        {1,0,0,0,0},
	},
	{}, //q
	{ //r
        {1,1,1,1,0},
        {1,0,0,0,1},
        {1,1,1,1,0},
        {1,0,0,1,0},
        {1,0,0,0,1},
	},
    { // S
        {0,1,1,1,1},
        {1,0,0,0,0},
        {0,1,1,1,0},
        {0,0,0,0,1},
        {1,1,1,1,0},
    },
    { // T
        {1,1,1,1,1},
        {0,0,1,0,0},
        {0,0,1,0,0},
        {0,0,1,0,0},
        {0,0,1,0,0},
    },
    { // U
        {1,0,0,0,1},
        {1,0,0,0,1},
        {1,0,0,0,1},
        {1,0,0,0,1},
        {0,1,1,1,0},
    },
    { // V
        {1,0,0,0,1},
        {1,0,0,0,1},
        {0,1,0,1,0},
        {0,1,0,1,0},
        {0,0,1,0,0},
    },
	{
        {1,0,0,0,1},
        {1,0,0,0,1},
        {1,0,1,0,1},
        {1,0,1,0,1},
        {0,1,0,1,0},
	}, //w
	{}, //x
    { // Y
        {1,0,0,0,1},
        {0,1,0,1,0},
        {0,0,1,0,0},
        {0,0,1,0,0},
        {0,0,1,0,0},
    },
	{}, //z
    { // !
        {0,1,0,0,1},
        {0,1,0,0,1},
        {0,1,0,0,1},
        {0,0,0,0,0},
        {0,1,0,0,1},
    },
};

const bool EDC_GET_LIT[][13][9]
{
	{
		{1,1,1,0,0,0,0,0,0},
		{1,0,0,0,0,0,0,0,0},
		{1,1,1,0,0,0,0,0,0},
		{1,0,0,0,0,0,0,0,0},
		{1,1,1,0,0,0,0,0,0},
		{0,0,0,0,1,1,0,0,0},
		{0,0,0,0,1,0,1,0,0},
		{0,0,0,0,1,0,1,0,0},
		{0,0,0,0,1,1,0,0,0},
		{0,0,0,0,0,0,0,1,1},
		{0,0,0,0,0,0,1,0,0},
		{0,0,0,0,0,0,1,0,0},
		{0,0,0,0,0,0,0,1,1},
		},
	{
		{0,1,1,1,0,0,0,0,0},
		{1,0,0,0,0,0,0,0,0},
		{1,0,1,1,0,0,0,0,0},
		{1,0,0,1,0,0,0,0,0},
		{0,1,1,0,0,0,0,0,0},
		{0,0,0,1,1,1,0,0,0},
		{0,0,0,1,0,0,0,0,0},
		{0,0,0,1,1,1,0,0,0},
		{0,0,0,1,0,0,0,0,0},
		{0,0,0,1,1,1,0,0,0},
		{0,0,0,0,0,0,1,1,1},
		{0,0,0,0,0,0,0,1,0},
		{0,0,0,0,0,0,0,1,0},
		},
	{
		{1,0,0,0,0,0,0,0,0},
		{1,0,0,0,0,0,0,0,0},
		{1,0,0,0,0,0,0,0,0},
		{1,1,1,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0},
		{0,0,0,0,1,0,0,0,0},
		{0,0,0,0,1,0,0,0,0},
		{0,0,0,0,1,0,0,0,0},
		{0,0,0,0,1,0,0,0,0},
		{0,0,0,0,0,0,1,1,1},
		{0,0,0,0,0,0,0,1,0},
		{0,0,0,0,0,0,0,1,0},
		{0,0,0,0,0,0,0,1,0},
		},
};

//const bool UPPER_CASE[][13][9]
//{
//    { //A
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,1,1,0,1,1,0,0},
//        {0,0,1,1,0,1,1,0,0},
//        {0,1,1,0,0,0,1,1,0},
//        {0,1,1,0,0,0,1,1,0},
//        {0,1,1,0,0,0,1,1,0},
//        {0,1,1,1,1,1,1,1,0},
//        {1,1,1,1,1,1,1,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1}
//    },
//    { //B
//        {1,1,1,1,1,1,1,0,0},
//        {1,1,1,1,1,1,1,1,0},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,1,1,0},
//        {1,1,1,1,1,1,1,0,0},
//        {1,1,1,1,1,1,1,0,0},
//        {1,1,0,0,0,0,1,1,0},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,1,1,1},
//        {1,1,1,1,1,1,1,1,0},
//        {1,1,1,1,1,1,1,0,0}
//    },
//    { //C
//        {0,0,1,1,1,1,1,0,0},
//        {0,1,1,1,1,1,1,1,0},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {0,1,1,1,1,1,1,1,0},
//        {0,0,1,1,1,1,1,0,0}
//    },
//    { //D
//        {1,1,1,1,1,1,0,0,0},
//        {1,1,1,1,1,1,1,0,0},
//        {1,1,0,0,0,0,1,1,0},
//        {1,1,0,0,0,0,1,1,0},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,1,1,0},
//        {1,1,0,0,0,0,1,1,0},
//        {1,1,1,1,1,1,1,0,0},
//        {1,1,1,1,1,1,0,0,0}
//    },
//    { //E
//        {1,1,1,1,1,1,1,1,1},
//        {1,1,1,1,1,1,1,1,1},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,1,1,1,1,1,0,0},
//        {1,1,1,1,1,1,1,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,1,1,1,1,1,1,1},
//        {1,1,1,1,1,1,1,1,1}
//    },
//    { //F
//        {1,1,1,1,1,1,1,1,1},
//        {1,1,1,1,1,1,1,1,1},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,1,1,1,1,1,0,0},
//        {1,1,1,1,1,1,1,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0}
//    },
//    { //G
//        {0,0,1,1,1,1,1,0,0},
//        {0,1,1,1,1,1,1,1,0},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,1,1,1,1},
//        {1,1,0,0,0,1,1,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {0,1,1,1,1,1,1,1,1},
//        {0,0,1,1,1,1,1,1,0}
//    },
//    { //H
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,1,1,1,1,1,1,1},
//        {1,1,1,1,1,1,1,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1}
//    },
//    { //I
//        {0,0,1,1,1,1,1,0,0},
//        {0,0,1,1,1,1,1,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,1,1,1,1,1,0,0},
//        {0,0,1,1,1,1,1,0,0}
//    },
//    { //J
//        {0,0,0,0,0,0,0,1,1},
//        {0,0,0,0,0,0,0,1,1},
//        {0,0,0,0,0,0,0,1,1},
//        {0,0,0,0,0,0,0,1,1},
//        {0,0,0,0,0,0,0,1,1},
//        {0,0,0,0,0,0,0,1,1},
//        {0,0,0,0,0,0,0,1,1},
//        {0,0,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {0,1,1,1,1,1,1,1,0},
//        {0,0,1,1,1,1,1,0,0}
//    },
//    { //K
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,1,1,0},
//        {1,1,0,0,0,1,1,0,0},
//        {1,1,0,0,1,1,0,0,0},
//        {1,1,0,1,1,0,0,0,0},
//        {1,1,1,1,0,0,0,0,0},
//        {1,1,1,0,0,0,0,0,0},
//        {1,1,1,1,0,0,0,0,0},
//        {1,1,0,1,1,0,0,0,0},
//        {1,1,0,0,1,1,0,0,0},
//        {1,1,0,0,0,1,1,0,0},
//        {1,1,0,0,0,0,1,1,0},
//        {1,1,0,0,0,0,0,1,1}
//    },
//    { //L
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,1,1,1,1,1,1,1},
//        {1,1,1,1,1,1,1,1,1}
//    },
//    { //M
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,1,0,0,0,1,1,1},
//        {1,1,1,0,0,0,1,1,1},
//        {1,1,1,1,0,1,1,1,1},
//        {1,1,0,1,0,1,0,1,1},
//        {1,1,0,1,1,1,0,1,1},
//        {1,1,0,0,1,0,0,1,1},
//        {1,1,0,0,1,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1}
//    },
//    { //N
//        {1,1,1,0,0,0,0,1,1},
//        {1,1,1,0,0,0,0,1,1},
//        {1,1,1,1,0,0,0,1,1},
//        {1,1,1,1,0,0,0,1,1},
//        {1,1,1,1,1,0,0,1,1},
//        {1,1,0,1,1,0,0,1,1},
//        {1,1,0,1,1,1,0,1,1},
//        {1,1,0,0,1,1,0,1,1},
//        {1,1,0,0,1,1,1,1,1},
//        {1,1,0,0,0,1,1,1,1},
//        {1,1,0,0,0,1,1,1,1},
//        {1,1,0,0,0,0,1,1,1},
//        {1,1,0,0,0,0,1,1,1}
//    },
//    { //O
//        {0,0,0,1,1,1,0,0,0},
//        {0,1,1,1,1,1,1,1,0},
//        {1,1,1,0,0,0,1,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,1,0,0,0,1,1,1},
//        {0,1,1,1,1,1,1,1,0},
//        {0,0,0,1,1,1,0,0,0}
//    },
//    { //P
//        {1,1,1,1,1,1,1,0,0},
//        {1,1,1,1,1,1,1,1,0},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,1,1,1,1,1,1,0},
//        {1,1,1,1,1,1,1,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0},
//        {1,1,0,0,0,0,0,0,0}
//    },
//    { //Q (TBD)
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,0,0,0,0,0,0},
//        {0,0,0,0,0,0,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0}
//    }, 
//    { //R
//        {1,1,1,1,1,1,1,0,0},
//        {1,1,1,1,1,1,1,1,0},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,1,1,1,1,1,1,0},
//        {1,1,1,1,1,1,1,0,0},
//        {1,1,1,1,0,0,0,0,0},
//        {1,1,0,1,1,0,0,0,0},
//        {1,1,0,0,1,1,0,0,0},
//        {1,1,0,0,0,1,1,0,0},
//        {1,1,0,0,0,0,1,1,0},
//        {1,1,0,0,0,0,0,1,1}
//    },
//    { //S
//        {0,0,0,1,1,1,0,0,0},
//        {0,1,1,1,1,1,1,1,0},
//        {1,1,1,0,0,0,1,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,1,0,0,0,0,0,0},
//        {0,1,1,1,1,0,0,0,0},
//        {0,0,1,1,1,1,1,0,0},
//        {0,0,0,0,1,1,1,1,0},
//        {0,0,0,0,0,0,1,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,1,0,0,0,1,1,1},
//        {0,1,1,1,1,1,1,1,0},
//        {0,0,0,1,1,1,0,0,0}
//    },
//    { //T
//        {1,1,1,1,1,1,1,1,1},
//        {1,1,1,1,1,1,1,1,1},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0}
//    },
//    { //U
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,1,0,0,0,1,1,1},
//        {0,1,1,1,1,1,1,1,0},
//        {0,0,0,1,1,1,0,0,0}
//    },
//    { //V
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {0,1,1,0,0,0,1,1,0},
//        {0,1,1,0,0,0,1,1,0},
//        {0,1,1,0,0,0,1,1,0},
//        {0,0,1,1,0,1,1,0,0},
//        {0,0,1,1,0,1,1,0,0},
//        {0,0,1,1,0,1,1,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,0,1,0,0,0,0}
//    },
//    { //W (TBD)
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,0,0,0,0,0,0},
//        {0,0,0,0,0,0,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0}
//    }, 
//    { //X (TBD)
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,0,0,0,0,0,0},
//        {0,0,0,0,0,0,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0}
//    }, 
//    { //Y
//        {1,1,0,0,0,0,0,1,1},
//        {1,1,0,0,0,0,0,1,1},
//        {0,1,1,0,0,0,1,1,0},
//        {0,1,1,0,0,0,1,1,0},
//        {0,0,1,1,0,1,1,0,0},
//        {0,0,1,1,0,1,1,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,0,1,1,1,0,0,0}
//    },
//    { //Z
//        {0,0,0,0,0,0,0,0,0},
//        {1,1,1,1,1,1,1,1,1},
//        {1,1,1,1,1,1,1,1,1},
//        {0,0,0,0,0,0,1,1,1},
//        {0,0,0,0,0,1,1,1,0},
//        {0,0,0,0,1,1,1,0,0},
//        {0,0,0,1,1,1,0,0,0},
//        {0,0,1,1,1,0,0,0,0},
//        {0,1,1,1,0,0,0,0,0},
//        {1,1,1,0,0,0,0,0,0},
//        {1,1,1,1,1,1,1,1,1},
//        {1,1,1,1,1,1,1,1,1},
//        {0,0,0,0,0,0,0,0,0}
//    }
//};

void drawLetter (char letter, CRGB color, uint8_t brightness = BRIGHTNESS)
{
	//int index = letter - 'A';

	//// Draw the coordinates (without first clearing), flip y axis
	//for (uint8_t x = 0; x < 9; x++)
	//{
	//	for (uint8_t y = 0; y < 13; y++)
	//	{

	//		if (true)//EDC_GET_LIT[index][y][x] == true)
	//		{
	//			// Special handling for black letters, invert existing cells
	//			if ((color.r == 0) && (color.g == 0) && (color.b == 0))
	//			{
	//				leds[XY(x+4,12-y)].r = leds[XY(x+4,12-y)].r * (255.0-(double)brightness)/255.0-50;
	//				leds[XY(x+4,12-y)].g = leds[XY(x+4,12-y)].g * (255.0-(double)brightness)/255.0-50;
	//				leds[XY(x+4,12-y)].b = leds[XY(x+4,12-y)].b * (255.0-(double)brightness)/255.0-50;
	//			}
	//			else
	//			{
	//				leds[XY(x+4,12-y)] = color;
	//				leds[XY(x+4,12-y)].nscale8(brightness);
	//			}
	//		}
	//	}
	//}
}

void drawHalfLetter (char letter, 
                     int8_t xOrigin = 0, 
                     int8_t yOrigin = 0, 
                     CRGB color = CRGB::White, 
                     uint8_t brightness = BRIGHTNESS)
{
    uint8_t index;
    if (letter == ' ')
	{
        index = 0;
	}
	else if (letter == '!')
	{
		index = 27;
	}
    else
	{
        index = letter - 'A' + 1; // +1 for space
	}

	// Draw each pixel from letter array (without first clearing), flip y axis
	for (int8_t x = 0; x < 5; x++)
	{
		for (int8_t y = 0; y < 5; y++)
		{
			if (HALF_CASE[index][y][x] == true)
			{
				// Special handling for black letters, invert existing cells
				if ((color.r == 0) && (color.g == 0) && (color.b == 0))
				{
					leds[XYBack((x+xOrigin), 4-y+yOrigin)].r = leds[XY(x,4-y)].r * (255.0-(double)brightness)/255.0-50;
					leds[XYBack((x+xOrigin), 4-y+yOrigin)].g = leds[XY(x,4-y)].g * (255.0-(double)brightness)/255.0-50;
					leds[XYBack((x+xOrigin), 4-y+yOrigin)].b = leds[XY(x,4-y)].b * (255.0-(double)brightness)/255.0-50;
				}
				else
				{
					leds[XYBack(x+xOrigin,4-y+yOrigin)] = color;
					leds[XYBack(x+xOrigin,4-y+yOrigin)].nscale8(brightness);
				}

				// Special handling for turning off neighboring pixels
                    
				for (uint8_t i = 0; i < 8; i++)
				{
					Coord coordModifier;
					switch(i)
					{
						case 0:
							coordModifier.x = -1;
							coordModifier.y = -1;
							break;
						case 1:
							coordModifier.x = -1;
							coordModifier.y = 0;
							break;
						case 2:
							coordModifier.x = -1;
							coordModifier.y = 1;
							break;
						case 3:
							coordModifier.x = 0;
							coordModifier.y = 1;
							break;
						case 4:
							coordModifier.x = 1;
							coordModifier.y = 1;
							break;
						case 5:
							coordModifier.x = 1;
							coordModifier.y = 0;
							break;
						case 6:
							coordModifier.x = 1;
							coordModifier.y = -1;
							break;
						case 7:
							coordModifier.x = 0;
							coordModifier.y = -1;
							break;
					}

					// Check if coordinate to modify is within the bounding box of the letter
					Coord relativeCoord;
					relativeCoord.x = x+coordModifier.x;
					relativeCoord.y = y+coordModifier.y;

					if ((relativeCoord.x >= 0) && 
						(relativeCoord.x < 5) &&
						(relativeCoord.y >= 0) && 
						(relativeCoord.y < 5))
					{
						// Check if coordinate to modify is occupied by letter pixel
						if (HALF_CASE[index][relativeCoord.y][relativeCoord.x] != 1)
						{
							leds[XYBack(relativeCoord.x+xOrigin,4-relativeCoord.y+yOrigin)] = CRGB::Black;
						}
					}
					// Always safe to modify if outside of the bounding box of the letter
					else
					{
						leds[XYBack(relativeCoord.x+xOrigin,4-relativeCoord.y+yOrigin)] = CRGB::Black;
					}
				}
			}
		}
	}
}

void drawScrollString(String string,  
					  uint8_t yOrigin,
                      CRGB color,
                      unsigned long speed)
{
	static uint8_t charIndex = 0;
    static int8_t xCoord = 0;

	// Draw current letter
	drawHalfLetter(string[charIndex], xCoord, yOrigin, color);
    
	// Draw second letter
	uint8_t charIndex2;
	if (charIndex+1 == string.length())
		charIndex2 = 0;
	else
		charIndex2 = charIndex + 1;

	drawHalfLetter(string[charIndex2], xCoord+6, yOrigin, color);

	// Draw third letter
	uint8_t charIndex3;
	if (charIndex2+1 == string.length())
		charIndex3 = 0;
	else
		charIndex3 = charIndex2 + 1;

	drawHalfLetter(string[charIndex3], xCoord+12, yOrigin, color);

    // Update offsets
    EVERY_N_MILLIS(speed)
    {
        xCoord--;

        if (xCoord == -4)
        {
            xCoord = 2;
            charIndex++;
        }
        if (charIndex == string.length())
        {
			Serial.println("Resetting index");
            charIndex = 0;
            Serial.println();
        }

  //      // Debug
  //      Serial.println();
		//Serial.println(charIndex);
  //      
		//Serial.print(string[charIndex]);
		//Serial.println(xCoord);

		//Serial.print(string[charIndex2]);
		//Serial.println(xCoord+6);

		//Serial.print(string[charIndex3]);
		//Serial.println(xCoord+12);
    }
}


long fadeStartMs = 0;
bool fadeStart = true;
void drawFadeLetter(char letter, CRGB color, unsigned long fadeTimeMs)
{
	long ms = millis();
	// Starting new letter
	if (fadeStart)
	{
		fadeStart = false;
		fadeStartMs = ms;
	}
											// msElapsed / total fade time
	uint8_t brightness = 255.0 * (1.0 - (((double)(ms - fadeStartMs)/(double)fadeTimeMs)));

	drawLetter(letter, color, brightness);
}

void drawFadeString(String string, CRGB color, unsigned long fadeTimeMs)
{
	static uint8_t charIndex = 0;

	if (string[charIndex] != ' ') // Exclude spaces
	{
		drawFadeLetter(string[charIndex], color, fadeTimeMs);
	}

	EVERY_N_MILLIS(fadeTimeMs)
	{
		fadeStart = true;
		Serial.print(string[charIndex]);
		charIndex++;
		if (charIndex == string.length())
		{
			charIndex = 0;
			Serial.println();
		}
	}
}

uint8_t drawTime = 0;

void drawEdcGetLit(CRGB color, unsigned long fadeTimeMs)
{
	drawFadeString("ABC ", color, fadeTimeMs);
}

void drawHeart(CRGB color, unsigned long fadeTimeMs)
{
	static uint8_t charIndex = 0;

// Draw the coordinates (without first clearing), flip y axis
	for (uint8_t x = 0; x < 9; x++)
	{
		for (uint8_t y = 0; y < 13; y++)
		{
			if (SPECIAL_CHARS[charIndex][y][x] == true)
			{
				leds[XY(x+4,12-y)] = color;
				leds[XY(x+4,12-y)].nscale8(BRIGHTNESS);
			}
		}
	}

	EVERY_N_MILLIS(fadeTimeMs)
	{
		static int increment = 1;
		charIndex += increment;

		if (charIndex == 2)
		{
			increment = -1;
		}
		else if (charIndex == 0)
		{
			increment = 1;
		}
	}
}

void drawFace(CRGB color, unsigned long fadeTimeMs)
{
	static uint8_t charIndex = 3;

// Draw the coordinates (without first clearing), flip y axis
	for (uint8_t x = 0; x < 9; x++)
	{
		for (uint8_t y = 0; y < 13; y++)
		{
			if (SPECIAL_CHARS[charIndex][y][x] == true)
			{
				leds[XY(x+4,12-y)] = color;
				leds[XY(x+4,12-y)].nscale8(BRIGHTNESS);
			}
		}
	}

	EVERY_N_MILLIS(fadeTimeMs)
	{
		static int increment = 1;
		charIndex += increment;

		if (charIndex == 8)
		{
			increment = -1;
		}
		else if (charIndex == 3)
		{
			increment = 1;
		}
	}
}